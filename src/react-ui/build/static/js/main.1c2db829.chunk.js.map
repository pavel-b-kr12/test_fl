{"version":3,"sources":["const.js","assets/logo.svg","components/CountDownTimer/CountDownTimer.jsx","utils.js","assets/main-bg.jpg","assets/main-bg-blue.jpg","assets/main-bg-green.jpg","components/Flowers/Flowers.jsx","assets/main-bg-orange.jpg","assets/main-bg-pink.jpg","assets/main-bg-violet.jpg","assets/main-bg-yellow.jpg","components/Controls/Controls.jsx","assets/lotus-aqua.svg","assets/lotus-green.svg","assets/lotus-orange.svg","assets/lotus-pink.svg","assets/lotus-violet.svg","assets/lotus-yellow.svg","components/LockedScreen/LockedScreen.jsx","components/Game/Game.jsx","components/App/App.jsx","reportWebVitals.js","index.js"],"names":["GAME_TIME_PLAY","Number","parseInt","process","REACT_APP_GAME_TIME_PLAY","COLORS","FAKE_COLORS","COLOR_DEFAULT","CountDownTimer","timeLeft","timerClass","time","minutes","Math","floor","seconds","calculateTimeLeft","className","flowers","backgroundImage","backgroundImageBlue","backgroundImageGreen","Flowers","activeColor","activeFlower","Object","keys","map","flower","alt","src","Controls","gameTime","setActiveColor","mqtt","user_id","localStorage","getItem","random","setItem","onSelectColor","color","publish","JSON","stringify","generateMessage","i","onClick","style","background","LockedScreen","lotusAqua","lotusGreen","lotusOrange","lotusPink","lotusViolet","lotusYellow","subscribe","topic","data","useState","setGameTime","game","gameState","parse","gameActive","useEffect","length","reduce","rgbStr","col","rgbStringify","setGameTimer","timer","setInterval","gm_active_till_t","countdown","Date","getTime","clearInterval","activeGameTime","date","round","removeItem","user_active","App","href","target","rel","logo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","mqttProps","document","getElementById"],"mappings":"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","file":"static/js/main.1c2db829.chunk.js","sourcesContent":["export const MQTT_TOPIC_SUBSCRIBE = 'flowers/ESP_LED';\nexport const MQTT_TOPIC_PUBLISH = 'flowers/ESP_LED/set';\n\nexport const GAME_TIME_PLAY = Number.parseInt(process.env.REACT_APP_GAME_TIME_PLAY) || 30;\n\nexport const COLORS = {\n  'rgb(255, 100, 0)': { \"r\": 255, \"g\": 100, \"b\": 0 }, // orange\n  'rgb(255, 20, 147)': { \"r\": 255, \"g\": 20, \"b\": 147 }, // pink\n  'rgb(200, 0, 255)': { \"r\": 200, \"g\": 0, \"b\": 255 }, // violet\n  'rgb(0, 255, 255)': { \"r\": 0, \"g\": 255, \"b\": 255 }, // aqua\n  'rgb(0, 225, 0)': { \"r\": 0, \"g\": 225, \"b\": 0 }, // green\n  'rgb(255, 255, 0)': { \"r\": 255, \"g\": 255, \"b\": 0 } // yellow\n};\n\nexport const FAKE_COLORS = {\n  'rgb(255, 100, 0)': 'rgb(251, 206, 91)',\n  'rgb(255, 20, 147)': 'rgb(248, 184, 211)',\n  'rgb(200, 0, 255)': 'rgb(186, 111, 168)',\n  'rgb(0, 255, 255)': 'rgb(162, 218, 219)',\n  'rgb(0, 225, 0)': 'rgb(213, 226, 116)',\n  'rgb(255, 255, 0)': 'rgb(255, 248, 161)'\n}\n\nexport const COLOR_DEFAULT = 'rgb(255, 255, 255)';\n","export default __webpack_public_path__ + \"static/media/logo.ea23c954.svg\";","import React from 'react';\n\nimport './styles.css';\nimport { calculateTimeLeft } from '../../utils';\n\nconst CountDownTimer = ({ timeLeft, timerClass = '' }) => {\n  const [minutes, seconds] = calculateTimeLeft(timeLeft);\n\n  return (\n    <section className={timerClass ? `timer ${timerClass}` : 'timer'}>\n      {minutes} : {seconds}\n    </section>\n  )\n};\n\nexport default CountDownTimer;\n","export const generateMessage = (color,user_id) => (\n  `{\"state\": \"ON\",\"brightness\": 255,\"color\": ${JSON.stringify(color)},\"transition\": 0,\"user_id\": ${JSON.stringify(user_id)}}`\n);\n\nexport const rgbStringify = (color = {}) => Object.keys(color).reduce((rgbStr, col) => (col === 'b'\n    ? `${rgbStr}${color[col]})`\n    : `${rgbStr}${color[col]}, `\n  ), 'rgb(');\n\nexport const calculateTimeLeft = (time) => {\n  const minutes = Math.floor((time / 60) % 60);\n  const seconds = Math.floor(time % 60);\n  if(time<=0) return ['','']\n  return [\n    `0${minutes}`,\n    seconds < 10 ? `0${seconds}` : seconds\n  ]\n};\n","export default __webpack_public_path__ + \"static/media/main-bg.9adcafc5.jpg\";","export default __webpack_public_path__ + \"static/media/main-bg-blue.b3ef2b3d.jpg\";","export default __webpack_public_path__ + \"static/media/main-bg-green.f11eab07.jpg\";","import React from 'react';\n\nimport './styles.css';\nimport backgroundImage from '../../assets/main-bg.jpg';\nimport backgroundImageBlue from '../../assets/main-bg-blue.jpg';\nimport backgroundImageGreen from '../../assets/main-bg-green.jpg';\nimport backgroundImageOrange from '../../assets/main-bg-orange.jpg';\nimport backgroundImagePink from '../../assets/main-bg-pink.jpg';\nimport backgroundImageViolet from '../../assets/main-bg-violet.jpg';\nimport backgroundImageYellow from '../../assets/main-bg-yellow.jpg';\nimport { COLOR_DEFAULT } from '../../const';\n\nconst flowers = {\n  'rgb(255, 255, 255)': backgroundImage,\n  'rgb(251, 206, 91)': backgroundImageOrange,\n  'rgb(248, 184, 211)': backgroundImagePink,\n  'rgb(186, 111, 168)': backgroundImageViolet,\n  'rgb(162, 218, 219)': backgroundImageBlue,\n  'rgb(213, 226, 116)': backgroundImageGreen,\n  'rgb(255, 248, 161)': backgroundImageYellow\n}\n\nconst Flowers = ({ activeColor }) => {\n  const activeFlower = activeColor ? activeColor : COLOR_DEFAULT;\n\n  return (\n    <section className='flowers-field'>\n      {Object.keys(flowers).map(flower => (\n        <img\n          key={flower}\n          alt=\"Alive Flowers are watching you\"\n          className={flower === activeFlower ? `flowers active` : 'flowers'}\n          src={flowers[flower]}\n         />\n      ))}\n      <p className='flowers-info'>Обери мені відтінок та зафарбуй квітки.</p>\n    </section>\n  )\n}\n\nexport default Flowers;\n","export default __webpack_public_path__ + \"static/media/main-bg-orange.23e65c89.jpg\";","export default __webpack_public_path__ + \"static/media/main-bg-pink.8f3a7f19.jpg\";","export default __webpack_public_path__ + \"static/media/main-bg-violet.43cfa96b.jpg\";","export default __webpack_public_path__ + \"static/media/main-bg-yellow.b7b639e8.jpg\";","import React from 'react';\n\nimport './styles.css';\nimport { COLORS, FAKE_COLORS, MQTT_TOPIC_PUBLISH } from '../../const';\nimport { generateMessage } from '../../utils';\nimport CountDownTimer from '../CountDownTimer';\nimport Flowers from '../Flowers';\n\nconst Controls = ({ gameTime, activeColor, setActiveColor, mqtt }) => {\n//TODO move to root\nvar user_id = localStorage.getItem('user_id');\nif(!user_id)\n{\n\tuser_id=Math.floor(Math.random()*100000);\n\tlocalStorage.setItem('user_id',user_id);\n}\n\n  const onSelectColor = color => {\n\t  \n    mqtt.publish(\n      MQTT_TOPIC_PUBLISH,\n      generateMessage(COLORS[color], user_id)\n    );\n    setActiveColor(color);\n  };\n\n  return (\n    <section className='controls-wrap'>\n      <Flowers activeColor={FAKE_COLORS[activeColor]} />\n      <section className='controls'>\n        <ul>\n          {Object.keys(COLORS).map((color, i) => (\n            <li\n              key={color}\n              className={activeColor === color ? `button-${i+1} active` : `button-${i+1}`}\n              onClick={() => onSelectColor(color)}\n              style={{ background: FAKE_COLORS[color] }}\n            />\n          ))}\n        </ul>\n        <CountDownTimer\n          timerClass='controls-timer'\n          timeLeft={gameTime}\n        />\n      </section>\n    </section>\n  );\n};\n\nexport default Controls;\n","export default __webpack_public_path__ + \"static/media/lotus-aqua.e0d01c2a.svg\";","export default __webpack_public_path__ + \"static/media/lotus-green.92564941.svg\";","export default __webpack_public_path__ + \"static/media/lotus-orange.17c89be0.svg\";","export default __webpack_public_path__ + \"static/media/lotus-pink.87b2eeeb.svg\";","export default __webpack_public_path__ + \"static/media/lotus-violet.8a14d3ad.svg\";","export default __webpack_public_path__ + \"static/media/lotus-yellow.dc894035.svg\";","import React from 'react';\n\nimport './styles.css';\nimport lotusAqua from '../../assets/lotus-aqua.svg';\nimport lotusGreen from '../../assets/lotus-green.svg'\nimport lotusOrange from '../../assets/lotus-orange.svg'\nimport lotusPink from '../../assets/lotus-pink.svg'\nimport lotusViolet from '../../assets/lotus-violet.svg'\nimport lotusYellow from '../../assets/lotus-yellow.svg'\n// import timerBg from '../../assets/timer-bg.svg';\n// import CountDownTimer from '../CountDownTimer';\n\nconst LockedScreen = (/*{ appTime }*/) => (\n  <section className='locked-screen'>\n    <p className='locked-info'>Дякую за твій дотик!</p>\n    <p>Ти справжній митець.</p>\n    <p>Спробуй ще через пару хвилини.</p>\n    <div className='locked-img'>\n      <img className='lotus-1' src={lotusAqua} alt=\"lotusAqua\" />\n      <img className='lotus-2' src={lotusGreen} alt=\"lotusGreen\" />\n      <img className='lotus-3' src={lotusOrange} alt=\"lotusOrange\" />\n      <img className='lotus-4' src={lotusPink} alt=\"lotusPink\" />\n      <img className='lotus-5' src={lotusViolet} alt=\"lotusViolet\" />\n      <img className='lotus-6' src={lotusYellow} alt=\"lotusYellow\" />\n    </div>\n    {/* <div className='timer-wrapper'>\n      <img src={timerBg} alt='timer' className='timer-bg' />\n      <CountDownTimer timeLeft={appTime} />\n    </div> */}\n  </section>\n);\n\nexport default LockedScreen;\n","import React, { useState, useEffect } from 'react';\nimport { subscribe } from 'mqtt-react';\n\nimport {\n  MQTT_TOPIC_SUBSCRIBE,\n  GAME_TIME_PLAY\n} from '../../const';\nimport { rgbStringify } from '../../utils';\n//import { setTimer } from '../../api';\nimport Controls from '../Controls';\nimport LockedScreen from '../LockedScreen';\n\nconst Game = ({ activeColor, setActiveColor, data, mqtt }) => {\n\t\n  const [gameTime, setGameTime] = useState(null);\n\n  const game = localStorage.getItem('gameActive');\n  const gameState = game ? JSON.parse(game) : true;\n  const [gameActive, setGameActive] = useState(gameState);\n  \n  useEffect(() => {\n    if (data && data.length) {\n      const color = rgbStringify(data[0].color);\n      setActiveColor(color);\n    }\n    return null;\n  }, [data]);\n\n  useEffect(() => setGameTimer(), [gameActive]);\n\n  useEffect(() => {\n    if (gameTime === 0) {\n      localStorage.setItem('gameActive', !gameActive);\n    };\n//const timer = gameTime > 0 && setInterval(() => setGameTime(gameTime - 1), 1000);\n//console.log(gameTime);\n    const timer =  setInterval(() => {\n\t\tlet gm_active_till_t = parseInt(localStorage.getItem('gm_active_till_t'));\n\t\tlet countdown=(gm_active_till_t&&(gm_active_till_t-new Date().getTime())>0)?\tMath.floor((gm_active_till_t-new Date().getTime())/1000) :0;\n\t\t//console.log(countdown);\n\t\t\n\t\tsetGameTime(countdown)\n\t\t}, 1000);\n    return () => clearInterval(timer);\n  }, [gameTime]);\n\n  const setGameTimer = () => {\n    var activeGameTime = localStorage.getItem('activeTime');\n    const isGameActive = JSON.parse(localStorage.getItem('gameActive'));\n\n    const date = new Date();\n    const time = date?.getTime();\n    const timeToPlay = time + (GAME_TIME_PLAY * 1000);\n\t\n\t//let gm_active_till_t = localStorage.getItem('gm_active_till_t');\n\t//TODO unlock timer if time >gm_active_till_t  but < gm_active_till_t+GAME_TIME_PLAY\n\t//\n\t\n\t/*\n    if (!activeGameTime) {\n      localStorage.setItem('gameActive', true);\n      //setTimer();\n      setGameTime(GAME_TIME_PLAY);\n      localStorage.setItem('activeTime', timeToPlay);\n      return;\n    }\n\t*/\n\n\tactiveGameTime=parseInt(activeGameTime);\n\t\n\tlet gm_active_till_t = parseInt(localStorage.getItem('gm_active_till_t'));\n//console.log(time, timeToPlay, activeGameTime, isGameActive, gm_active_till_t);\n\n    if (gm_active_till_t && (time < gm_active_till_t)) {\n      setGameTime(Math.round((gm_active_till_t - time) / 1000));\n      return;\n    };\n    // if ((time < activeGameTime) && isGameActive) {\n      // setGameTime(Math.round((activeGameTime - time) / 1000));\n      // return;\n    // };\n/*\n    if (time > activeGameTime) {\n      localStorage.setItem('gameActive', true);\n      //setTimer();\n      setGameActive(true);\n      setGameTime(GAME_TIME_PLAY);\n      localStorage.setItem('activeTime', timeToPlay);\n      return;\n    }*/\n  };\n\n\t//TODO move to root\n\tvar user_id = localStorage.getItem('user_id');\n\tif(!user_id)\n\t{\n\t\tuser_id=Math.floor(Math.random()*100000);\n\t\tlocalStorage.setItem('user_id',user_id);\n\t}\n\telse user_id=parseInt(user_id);\n\n\tif(data[0])\n\t{\n\t\t{\n\t\tlet gm_active_till_t = parseInt(localStorage.getItem('gm_active_till_t'));\n\t\tif(gm_active_till_t-new Date().getTime() <-GAME_TIME_PLAY)\n\t\t{ //TODO refactoring\n\t\t\tlocalStorage.removeItem('gm_active_till_t');\n\t\t\tgm_active_till_t=null;\n\t\t}\n\t\t\n\t\tif(gm_active_till_t)\n\t\t{\n\t\t\tgm_active_till_t=gm_active_till_t;\n\t\t}\n\t\t//console.log(data[0], data[0].user_active, user_id, gm_active_till_t-new Date().getTime());//, data[0].user_active, user_id, parseInt(data[0].user_active)==user_id\n\t\t\n\t\t}\n\t\tvar user_active=parseInt(data[0].user_active);\n\t\t\n\t\tif (user_active===0)\n\t\t{\n\t\t\tlet gm_active_till_t = parseInt(localStorage.getItem('gm_active_till_t'));\n\t\t\tif(gm_active_till_t&&new Date().getTime()<gm_active_till_t+GAME_TIME_PLAY) \n\t\t\t{//some time to other people can react on game open\n\t\t//TODO can be smaller than GAME_TIME_PLAY, if no other active users appear\n\t\t//TODO2 do not off game if nobody else connected\n\t\t\t\treturn <LockedScreen />\n\t\t\t}\n\t\t}\n\t\telse\n\t\tif (user_active)\n\t\t{\n\t\t\tif (user_active===user_id)\n\t\t\t{ //this user is active\n\t\t\t\t\n\t\t\t\tlet gm_active_till_t = localStorage.getItem('gm_active_till_t');\n\t\t\t\tif(!gm_active_till_t) //at start of active\n\t\t\t\t{\n\t\t\t\t\tlocalStorage.setItem('gm_active_till_t',Math.floor(new Date().getTime()+GAME_TIME_PLAY*1000));\n\t\t\t\t}\n\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlocalStorage.removeItem('gm_active_till_t');\n\t\t\t\treturn <LockedScreen />\n\t\t\t}\n\n\t\t}\n\t}\n\telse\n\t{\n\t\tlet gm_active_till_t = localStorage.getItem('gm_active_till_t');\n\t\tif(gm_active_till_t)\n\t\t{\n\t\t\tgm_active_till_t=parseInt(gm_active_till_t);\n\t\t\tif(new Date().getTime()>gm_active_till_t && new Date().getTime()<gm_active_till_t+GAME_TIME_PLAY)\n\t\t\t{\n\t\t\t\treturn <LockedScreen />\n\t\t\t}\n\t\t}\n\t\t\n\t\t//if (!gameTime) return <LockedScreen />\n\t}\n\n  return (\n    <Controls\n      mqtt={mqtt}\n      gameTime={gameTime}\n      activeColor={activeColor}\n      setActiveColor={setActiveColor}\n    />\n  );\n};\n\nexport default subscribe({ topic: MQTT_TOPIC_SUBSCRIBE })(Game);\n","import React, { useState } from 'react';\n\nimport './styles.css';\nimport { COLOR_DEFAULT } from '../../const';\nimport logo from '../../assets/logo.svg';\nimport Game from '../Game';\n\nconst App = () => {\n  const [activeColor, setActiveColor] = useState(COLOR_DEFAULT);\n\n  return (\n    <section className='game'>\n      <a href='https://tsum.ua/' className='logo' target='_blank' rel=\"noreferrer\">\n        <img src={logo} alt='ЦУМ Киев'/>\n      </a>\n      <Game activeColor={activeColor} setActiveColor={setActiveColor} />\n    </section>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Connector } from 'mqtt-react';\n\nimport './index.css';\nimport App from './components/App';\n\nimport reportWebVitals from './reportWebVitals';\n\nconst mqttBrokerUrl = process.env.REACT_APP_MQTT_BROKER_URL;\n\nReactDOM.render(\n  <Connector mqttProps={mqttBrokerUrl}>\n    <App />\n  </Connector>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}